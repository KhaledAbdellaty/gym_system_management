// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/model/accounts.dart';
import 'data/model/bills.dart';
import 'data/model/classes.dart';
import 'data/model/expenses.dart';
import 'data/model/member.dart';
import 'data/model/payments.dart';
import 'data/model/products.dart';
import 'data/model/subscribe.dart';
import 'data/model/suppliers.dart';
import 'data/model/users.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5046885711521420716),
      name: 'Accounts',
      lastPropertyId: const IdUid(2, 4618595258260712551),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2041542710987964233),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4618595258260712551),
            name: 'accountName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(8, 3320337800475808748),
            name: 'payments',
            targetId: const IdUid(6, 1759709665385556246))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 2111034196767112796),
      name: 'Bills',
      lastPropertyId: const IdUid(11, 3758662647740822852),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1386989662685609262),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(4, 3474196773944970428),
            name: 'memberId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 8391439666834430336),
            relationTarget: 'Member'),
        ModelProperty(
            id: const IdUid(5, 7577477551956215029),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5652419806736175253),
            name: 'totalPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5937101617347083517),
            name: 'deptPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7092122252960109143),
            name: 'paidPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6424272621223914338),
            name: 'billDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3758662647740822852),
            name: 'accountId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 5380772833693614760),
            relationTarget: 'Accounts')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'payments', srcEntity: 'Payment', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(3, 1282284697091285591),
      name: 'Classes',
      lastPropertyId: const IdUid(4, 3446697677721880845),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8714771763289442696),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3422545533966739856),
            name: 'className',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3922708181381389599),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3446697677721880845),
            name: 'sessionsCount',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 1634854073885538741),
      name: 'Expenses',
      lastPropertyId: const IdUid(1, 2067393233415213383),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2067393233415213383),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 5321010525842588089),
            name: 'accounts',
            targetId: const IdUid(1, 5046885711521420716))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 6770917668614195288),
      name: 'Member',
      lastPropertyId: const IdUid(6, 660623927334170308),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1564647787233821063),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4177504983728470331),
            name: 'gender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3423979502393529898),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9195261427593776764),
            name: 'createdBy',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5185294347436189617),
            name: 'phoneNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 660623927334170308),
            name: 'createdAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 4356462441650565663),
            name: 'classes',
            targetId: const IdUid(3, 1282284697091285591)),
        ModelRelation(
            id: const IdUid(7, 5008683402095243950),
            name: 'bills',
            targetId: const IdUid(2, 2111034196767112796)),
        ModelRelation(
            id: const IdUid(11, 6123950173827862710),
            name: 'products',
            targetId: const IdUid(7, 5581596290817093742))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'subscribe', srcEntity: 'SubscribeModel', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(6, 1759709665385556246),
      name: 'Payment',
      lastPropertyId: const IdUid(9, 7248598300085710317),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3368203925847995425),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1016976451592350213),
            name: 'paymentDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 221632559022320689),
            name: 'billId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 3729893398845539421),
            relationTarget: 'Bills'),
        ModelProperty(
            id: const IdUid(9, 7248598300085710317),
            name: 'totalPayedPrice',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 5581596290817093742),
      name: 'Products',
      lastPropertyId: const IdUid(7, 1170994693190204825),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1654840613847134460),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4455440162030017446),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1686517529648818212),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5635105978302268500),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1170994693190204825),
            name: 'supplierId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 3758799770450850182),
            relationTarget: 'Suppliers')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 5165578603782852549),
      name: 'SubscribeModel',
      lastPropertyId: const IdUid(6, 4020236479488019010),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7866533086741129101),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1263856331665615005),
            name: 'subscribeLong',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5136063832053296193),
            name: 'classesId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 5950877700149631200),
            relationTarget: 'Classes'),
        ModelProperty(
            id: const IdUid(4, 6954313475138865642),
            name: 'memberId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 410230525490032305),
            relationTarget: 'Member'),
        ModelProperty(
            id: const IdUid(5, 7124156376879821124),
            name: 'startSubscribe',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4020236479488019010),
            name: 'endSubscribe',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 1025064547876277320),
      name: 'Users',
      lastPropertyId: const IdUid(5, 3720792043691839812),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2368606453070327918),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2310091166069279624),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5127585963107878572),
            name: 'phoneNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6634554605971694469),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3720792043691839812),
            name: 'auth',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 2727355850923980021),
      name: 'Suppliers',
      lastPropertyId: const IdUid(2, 1129575605745097310),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6647725197633114607),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1129575605745097310),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(9, 3787556221339459399),
            name: 'products',
            targetId: const IdUid(7, 5581596290817093742)),
        ModelRelation(
            id: const IdUid(10, 1949775291980302285),
            name: 'bills',
            targetId: const IdUid(2, 2111034196767112796))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(10, 2727355850923980021),
      lastIndexId: const IdUid(9, 3758799770450850182),
      lastRelationId: const IdUid(11, 6123950173827862710),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [
        3858042271443700738,
        2620569368074062898,
        6258544095297843357
      ],
      retiredPropertyUids: const [
        5691836458244011072,
        5061134154932771465,
        5923716232836071916,
        1366040780474879033,
        6468715424770339961,
        7690364769981284898,
        6402643015121494630,
        4803502756764076810,
        8900119096585909317,
        6129156312763828710
      ],
      retiredRelationUids: const [
        8880814366950476209,
        1263949949627980043,
        5701640725816337270,
        657815443010951443
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Accounts: EntityDefinition<Accounts>(
        model: _entities[0],
        toOneRelations: (Accounts object) => [],
        toManyRelations: (Accounts object) =>
            {RelInfo<Accounts>.toMany(8, object.id): object.payments},
        getId: (Accounts object) => object.id,
        setId: (Accounts object, int id) {
          object.id = id;
        },
        objectToFB: (Accounts object, fb.Builder fbb) {
          final accountNameOffset = object.accountName == null
              ? null
              : fbb.writeString(object.accountName!);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, accountNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Accounts()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..accountName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6);
          InternalToManyAccess.setRelInfo(object.payments, store,
              RelInfo<Accounts>.toMany(8, object.id), store.box<Accounts>());
          return object;
        }),
    Bills: EntityDefinition<Bills>(
        model: _entities[1],
        toOneRelations: (Bills object) => [object.member, object.account],
        toManyRelations: (Bills object) => {
              RelInfo<Payment>.toOneBacklink(
                      8, object.id, (Payment srcObject) => srcObject.bill):
                  object.payments
            },
        getId: (Bills object) => object.id,
        setId: (Bills object, int id) {
          object.id = id;
        },
        objectToFB: (Bills object, fb.Builder fbb) {
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(3, object.member.targetId);
          fbb.addOffset(4, statusOffset);
          fbb.addFloat64(5, object.totalPrice);
          fbb.addFloat64(6, object.deptPrice);
          fbb.addFloat64(7, object.paidPrice);
          fbb.addInt64(9, object.billDate.millisecondsSinceEpoch);
          fbb.addInt64(10, object.account.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Bills(
              billDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..status = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..totalPrice = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 14)
            ..deptPrice = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 16)
            ..paidPrice = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 18);
          object.member.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.member.attach(store);
          object.account.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.account.attach(store);
          InternalToManyAccess.setRelInfo(
              object.payments,
              store,
              RelInfo<Payment>.toOneBacklink(
                  8, object.id, (Payment srcObject) => srcObject.bill),
              store.box<Bills>());
          return object;
        }),
    Classes: EntityDefinition<Classes>(
        model: _entities[2],
        toOneRelations: (Classes object) => [],
        toManyRelations: (Classes object) => {},
        getId: (Classes object) => object.id,
        setId: (Classes object, int id) {
          object.id = id;
        },
        objectToFB: (Classes object, fb.Builder fbb) {
          final classNameOffset = object.className == null
              ? null
              : fbb.writeString(object.className!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, classNameOffset);
          fbb.addFloat64(2, object.price);
          fbb.addInt64(3, object.sessionsCount);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Classes(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              className: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              price: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              sessionsCount: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10));

          return object;
        }),
    Expenses: EntityDefinition<Expenses>(
        model: _entities[3],
        toOneRelations: (Expenses object) => [],
        toManyRelations: (Expenses object) =>
            {RelInfo<Expenses>.toMany(2, object.id): object.accounts},
        getId: (Expenses object) => object.id,
        setId: (Expenses object, int id) {
          object.id = id;
        },
        objectToFB: (Expenses object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Expenses()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(object.accounts, store,
              RelInfo<Expenses>.toMany(2, object.id), store.box<Expenses>());
          return object;
        }),
    Member: EntityDefinition<Member>(
        model: _entities[4],
        toOneRelations: (Member object) => [],
        toManyRelations: (Member object) => {
              RelInfo<Member>.toMany(3, object.id): object.classes,
              RelInfo<Member>.toMany(7, object.id): object.bills,
              RelInfo<Member>.toMany(11, object.id): object.products,
              RelInfo<SubscribeModel>.toOneBacklink(4, object.id,
                      (SubscribeModel srcObject) => srcObject.member):
                  object.subscribe
            },
        getId: (Member object) => object.id,
        setId: (Member object, int id) {
          object.id = id;
        },
        objectToFB: (Member object, fb.Builder fbb) {
          final genderOffset =
              object.gender == null ? null : fbb.writeString(object.gender!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final createdByOffset = object.createdBy == null
              ? null
              : fbb.writeString(object.createdBy!);
          final phoneNoOffset =
              object.phoneNo == null ? null : fbb.writeString(object.phoneNo!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, genderOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, createdByOffset);
          fbb.addOffset(4, phoneNoOffset);
          fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Member(
              gender: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              createdBy: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              phoneNo: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              createdAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(object.classes, store,
              RelInfo<Member>.toMany(3, object.id), store.box<Member>());
          InternalToManyAccess.setRelInfo(object.bills, store,
              RelInfo<Member>.toMany(7, object.id), store.box<Member>());
          InternalToManyAccess.setRelInfo(object.products, store,
              RelInfo<Member>.toMany(11, object.id), store.box<Member>());
          InternalToManyAccess.setRelInfo(
              object.subscribe,
              store,
              RelInfo<SubscribeModel>.toOneBacklink(
                  4, object.id, (SubscribeModel srcObject) => srcObject.member),
              store.box<Member>());
          return object;
        }),
    Payment: EntityDefinition<Payment>(
        model: _entities[5],
        toOneRelations: (Payment object) => [object.bill],
        toManyRelations: (Payment object) => {},
        getId: (Payment object) => object.id,
        setId: (Payment object, int id) {
          object.id = id;
        },
        objectToFB: (Payment object, fb.Builder fbb) {
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.paymentDate.millisecondsSinceEpoch);
          fbb.addInt64(7, object.bill.targetId);
          fbb.addFloat64(8, object.totalPayedPrice);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Payment(
              paymentDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..totalPayedPrice = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 20);
          object.bill.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.bill.attach(store);
          return object;
        }),
    Products: EntityDefinition<Products>(
        model: _entities[6],
        toOneRelations: (Products object) => [object.supplier],
        toManyRelations: (Products object) => {},
        getId: (Products object) => object.id,
        setId: (Products object, int id) {
          object.id = id;
        },
        objectToFB: (Products object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(3, object.price);
          fbb.addInt64(5, object.count);
          fbb.addInt64(6, object.supplier.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Products(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              price: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..count = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 14);
          object.supplier.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.supplier.attach(store);
          return object;
        }),
    SubscribeModel: EntityDefinition<SubscribeModel>(
        model: _entities[7],
        toOneRelations: (SubscribeModel object) =>
            [object.classes, object.member],
        toManyRelations: (SubscribeModel object) => {},
        getId: (SubscribeModel object) => object.id,
        setId: (SubscribeModel object, int id) {
          object.id = id;
        },
        objectToFB: (SubscribeModel object, fb.Builder fbb) {
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.subscribeLong);
          fbb.addInt64(2, object.classes.targetId);
          fbb.addInt64(3, object.member.targetId);
          fbb.addInt64(4, object.startSubscribe?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.endSubscribe?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final startSubscribeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final endSubscribeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = SubscribeModel(
              subscribeLong: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 6))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..startSubscribe = startSubscribeValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(startSubscribeValue)
            ..endSubscribe = endSubscribeValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(endSubscribeValue);
          object.classes.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.classes.attach(store);
          object.member.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.member.attach(store);
          return object;
        }),
    Users: EntityDefinition<Users>(
        model: _entities[8],
        toOneRelations: (Users object) => [],
        toManyRelations: (Users object) => {},
        getId: (Users object) => object.id,
        setId: (Users object, int id) {
          object.id = id;
        },
        objectToFB: (Users object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final phoneNoOffset =
              object.phoneNo == null ? null : fbb.writeString(object.phoneNo!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final authOffset =
              object.auth == null ? null : fbb.writeString(object.auth!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, phoneNoOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(4, authOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Users(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              phoneNo: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              auth: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));

          return object;
        }),
    Suppliers: EntityDefinition<Suppliers>(
        model: _entities[9],
        toOneRelations: (Suppliers object) => [],
        toManyRelations: (Suppliers object) => {
              RelInfo<Suppliers>.toMany(9, object.id): object.products,
              RelInfo<Suppliers>.toMany(10, object.id): object.bills
            },
        getId: (Suppliers object) => object.id,
        setId: (Suppliers object, int id) {
          object.id = id;
        },
        objectToFB: (Suppliers object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Suppliers(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0))
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6);
          InternalToManyAccess.setRelInfo(object.products, store,
              RelInfo<Suppliers>.toMany(9, object.id), store.box<Suppliers>());
          InternalToManyAccess.setRelInfo(object.bills, store,
              RelInfo<Suppliers>.toMany(10, object.id), store.box<Suppliers>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Accounts] entity fields to define ObjectBox queries.
class Accounts_ {
  /// see [Accounts.id]
  static final id = QueryIntegerProperty<Accounts>(_entities[0].properties[0]);

  /// see [Accounts.accountName]
  static final accountName =
      QueryStringProperty<Accounts>(_entities[0].properties[1]);

  /// see [Accounts.payments]
  static final payments =
      QueryRelationToMany<Accounts, Payment>(_entities[0].relations[0]);
}

/// [Bills] entity fields to define ObjectBox queries.
class Bills_ {
  /// see [Bills.id]
  static final id = QueryIntegerProperty<Bills>(_entities[1].properties[0]);

  /// see [Bills.member]
  static final member =
      QueryRelationToOne<Bills, Member>(_entities[1].properties[1]);

  /// see [Bills.status]
  static final status = QueryStringProperty<Bills>(_entities[1].properties[2]);

  /// see [Bills.totalPrice]
  static final totalPrice =
      QueryDoubleProperty<Bills>(_entities[1].properties[3]);

  /// see [Bills.deptPrice]
  static final deptPrice =
      QueryDoubleProperty<Bills>(_entities[1].properties[4]);

  /// see [Bills.paidPrice]
  static final paidPrice =
      QueryDoubleProperty<Bills>(_entities[1].properties[5]);

  /// see [Bills.billDate]
  static final billDate =
      QueryIntegerProperty<Bills>(_entities[1].properties[6]);

  /// see [Bills.account]
  static final account =
      QueryRelationToOne<Bills, Accounts>(_entities[1].properties[7]);
}

/// [Classes] entity fields to define ObjectBox queries.
class Classes_ {
  /// see [Classes.id]
  static final id = QueryIntegerProperty<Classes>(_entities[2].properties[0]);

  /// see [Classes.className]
  static final className =
      QueryStringProperty<Classes>(_entities[2].properties[1]);

  /// see [Classes.price]
  static final price = QueryDoubleProperty<Classes>(_entities[2].properties[2]);

  /// see [Classes.sessionsCount]
  static final sessionsCount =
      QueryIntegerProperty<Classes>(_entities[2].properties[3]);
}

/// [Expenses] entity fields to define ObjectBox queries.
class Expenses_ {
  /// see [Expenses.id]
  static final id = QueryIntegerProperty<Expenses>(_entities[3].properties[0]);

  /// see [Expenses.accounts]
  static final accounts =
      QueryRelationToMany<Expenses, Accounts>(_entities[3].relations[0]);
}

/// [Member] entity fields to define ObjectBox queries.
class Member_ {
  /// see [Member.id]
  static final id = QueryIntegerProperty<Member>(_entities[4].properties[0]);

  /// see [Member.gender]
  static final gender = QueryStringProperty<Member>(_entities[4].properties[1]);

  /// see [Member.name]
  static final name = QueryStringProperty<Member>(_entities[4].properties[2]);

  /// see [Member.createdBy]
  static final createdBy =
      QueryStringProperty<Member>(_entities[4].properties[3]);

  /// see [Member.phoneNo]
  static final phoneNo =
      QueryStringProperty<Member>(_entities[4].properties[4]);

  /// see [Member.createdAt]
  static final createdAt =
      QueryIntegerProperty<Member>(_entities[4].properties[5]);

  /// see [Member.classes]
  static final classes =
      QueryRelationToMany<Member, Classes>(_entities[4].relations[0]);

  /// see [Member.bills]
  static final bills =
      QueryRelationToMany<Member, Bills>(_entities[4].relations[1]);

  /// see [Member.products]
  static final products =
      QueryRelationToMany<Member, Products>(_entities[4].relations[2]);
}

/// [Payment] entity fields to define ObjectBox queries.
class Payment_ {
  /// see [Payment.id]
  static final id = QueryIntegerProperty<Payment>(_entities[5].properties[0]);

  /// see [Payment.paymentDate]
  static final paymentDate =
      QueryIntegerProperty<Payment>(_entities[5].properties[1]);

  /// see [Payment.bill]
  static final bill =
      QueryRelationToOne<Payment, Bills>(_entities[5].properties[2]);

  /// see [Payment.totalPayedPrice]
  static final totalPayedPrice =
      QueryDoubleProperty<Payment>(_entities[5].properties[3]);
}

/// [Products] entity fields to define ObjectBox queries.
class Products_ {
  /// see [Products.id]
  static final id = QueryIntegerProperty<Products>(_entities[6].properties[0]);

  /// see [Products.name]
  static final name = QueryStringProperty<Products>(_entities[6].properties[1]);

  /// see [Products.price]
  static final price =
      QueryDoubleProperty<Products>(_entities[6].properties[2]);

  /// see [Products.count]
  static final count =
      QueryIntegerProperty<Products>(_entities[6].properties[3]);

  /// see [Products.supplier]
  static final supplier =
      QueryRelationToOne<Products, Suppliers>(_entities[6].properties[4]);
}

/// [SubscribeModel] entity fields to define ObjectBox queries.
class SubscribeModel_ {
  /// see [SubscribeModel.id]
  static final id =
      QueryIntegerProperty<SubscribeModel>(_entities[7].properties[0]);

  /// see [SubscribeModel.subscribeLong]
  static final subscribeLong =
      QueryIntegerProperty<SubscribeModel>(_entities[7].properties[1]);

  /// see [SubscribeModel.classes]
  static final classes =
      QueryRelationToOne<SubscribeModel, Classes>(_entities[7].properties[2]);

  /// see [SubscribeModel.member]
  static final member =
      QueryRelationToOne<SubscribeModel, Member>(_entities[7].properties[3]);

  /// see [SubscribeModel.startSubscribe]
  static final startSubscribe =
      QueryIntegerProperty<SubscribeModel>(_entities[7].properties[4]);

  /// see [SubscribeModel.endSubscribe]
  static final endSubscribe =
      QueryIntegerProperty<SubscribeModel>(_entities[7].properties[5]);
}

/// [Users] entity fields to define ObjectBox queries.
class Users_ {
  /// see [Users.id]
  static final id = QueryIntegerProperty<Users>(_entities[8].properties[0]);

  /// see [Users.name]
  static final name = QueryStringProperty<Users>(_entities[8].properties[1]);

  /// see [Users.phoneNo]
  static final phoneNo = QueryStringProperty<Users>(_entities[8].properties[2]);

  /// see [Users.password]
  static final password =
      QueryStringProperty<Users>(_entities[8].properties[3]);

  /// see [Users.auth]
  static final auth = QueryStringProperty<Users>(_entities[8].properties[4]);
}

/// [Suppliers] entity fields to define ObjectBox queries.
class Suppliers_ {
  /// see [Suppliers.id]
  static final id = QueryIntegerProperty<Suppliers>(_entities[9].properties[0]);

  /// see [Suppliers.name]
  static final name =
      QueryStringProperty<Suppliers>(_entities[9].properties[1]);

  /// see [Suppliers.products]
  static final products =
      QueryRelationToMany<Suppliers, Products>(_entities[9].relations[0]);

  /// see [Suppliers.bills]
  static final bills =
      QueryRelationToMany<Suppliers, Bills>(_entities[9].relations[1]);
}
